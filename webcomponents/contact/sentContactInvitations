import getUuidByString from "uuid-by-string";
import { AccountController } from "../../backend/account";
import { Backend, displayMessage } from "../../backend/backend";
import { ContactCard } from "./contactCard";

/**
 * Display the list of sent contact invitation. If the invitation was not pending it will be removed.
 */
export class SentContactInvitations extends HTMLElement {

    // Create the applicaiton view.
    constructor(account, onRevokeContact) {
        super()

        // Set the shadow dom.
        this.attachShadow({ mode: 'open' });

        this.account = account;
        this.onRevokeContact = onRevokeContact;

        Backend.getGlobule(AccountController.account.domain).eventHub.subscribe("sent_" + account.getId() + "@" + account.getDomain() + "_evt",
            (uuid) => { },
            (evt) => {
                // So here I will append the account into the list.
                let invitation = JSON.parse(evt)
                AccountController.getAccount(invitation._id,
                    (contact) => {
                        this.appendContact(contact)
                    },
                    err => {
                        displayMessage(err, 3000)
                    })
            },
            false, this)

        this.shadowRoot.innerHTML = `
        <style>
           

            .contact-invitations-list{
                display: flex;
                flex-direction: column;
            }

            .contact-invitations-list globular-contact-card{
                border-bottom: 1px solid var(--palette-divider);
            }

        </style>

        <div class="contact-invitations-list">
            <slot></slot>
        </div>

        `

        let globule = Backend.getGlobule(account.domain)

        // So here I will get the list of sent invitation for the account.
        AccountController.getContacts(this.account, `{"status":"sent"}`, (invitations) => {

            for (var i = 0; i < invitations.length; i++) {
                AccountController.getAccount(invitations[i]._id,
                    (contact) => {
                        this.appendContact(contact)
                    },
                    err => {
                        ApplicationView.displayMessage(err, 3000)
                        console.log(err)
                    })
            }
        }, err => {
            ApplicationView.displayMessage(err, 3000)
        })


        globule.eventHub.subscribe("revoked_" + account.getId() + "@" + account.getDomain() + "_evt",
            (uuid) => { },
            (evt) => {
                let invitation = JSON.parse(evt);
                AccountController.getAccount(invitation._id,
                    (contact) => {
                        this.removeContact(contact);
                    },
                    err => {
                        ApplicationView.displayMessage(err, 3000)
                        console.log(err)
                    })
            },
            false, this)

        globule.eventHub.subscribe("declined_" + account.getId() + "@" + account.getDomain() + "_evt",
            (uuid) => { },
            (evt) => {
                let invitation = JSON.parse(evt);
                AccountController.getAccount(invitation._id,
                    (contact) => {
                        this.removeContact(contact);
                    },
                    err => {
                        ApplicationView.displayMessage(err, 3000)
                        console.log(err)
                    })
            },
            false, this)

        globule.eventHub.subscribe("accepted_" + account.getId() + "@" + account.getDomain() + "_evt",
            (uuid) => { },
            (evt) => {
                let invitation = JSON.parse(evt);
                AccountController.getAccount(invitation._id,
                    (contact) => {
                        this.removeContact(contact);
                    },
                    err => {
                        ApplicationView.displayMessage(err, 3000)
                        console.log(err)
                    })
            },
            false, this)
    }

    // The connection callback.
    connectedCallback() {


    }

    appendContact(contact) {

        let id = "_" + getUuidByString(contact.getId() + "@" + contact.getId() + "_pending_invitation")
        if (this.querySelector("#" + id) != undefined) {
            return;
        }

        let card = new ContactCard(this.account, contact)

        card.id = id
        card.setRevokeButton(()=>{this.onRevokeContact(contact); card.remove()})
        this.appendChild(card)
        window.dispatchEvent(new Event('resize'));
    }

    removeContact(contact) {
        // simply remove it.
        let id = "_" + getUuidByString(contact.getId() + "@" + contact.getDomain() + "_pending_invitation")
        let card = this.querySelector("#" + id)
        if (card != undefined) {
            this.removeChild(card)
        }
        window.dispatchEvent(new Event('resize'));
    }
}

customElements.define('globular-sent-contact-invitations', SentContactInvitations)
